### A Pluto.jl notebook ###
# v0.11.14

using Markdown
using InteractiveUtils

# ╔═╡ 1222daf2-fb68-11ea-020d-11fa0dca14cc
begin
	using Plots
	using Traceur
	using BenchmarkTools
end

# ╔═╡ 546db3f8-fb68-11ea-0403-87753ab83677
import Pkg; Pkg.add("BenchmarkTools")

# ╔═╡ cf4c4fb2-fb6f-11ea-0c23-eda948daf61a
begin
	abstract type FDMode end
	struct FT_BS <: FDMode end #Forward Time, Backward Space
	struct FT_CS <: FDMode end #Forward Time, Central Space
	struct Lax_Fried <: FDMode end #Lax-Friedrich
	struct Lax_Wend <: FDMode end #Lax-Wendroff Scheme
end

# ╔═╡ e321b0e6-fb67-11ea-2950-dfd6e62d9e14
function make_1Dgrid(start_::Float64, end_::Float64, n_grids::Int)
    x = collect(LinRange(start_, end_, n_grids))::Vector{Float64}
    u = zero(x)::Vector{Float64}

    return x, u
end

# ╔═╡ 1506ac64-fb69-11ea-0f62-3b899fe1a9f6
function initialize_grid!(x::Vector{Float64}, u::Vector{Float64}, f0::Function)
    u .+= f0.(x)
end

# ╔═╡ 340e4d54-fb6b-11ea-293d-a1b7cdf81a1b
function plot_solution(x::Vector{Float64}, u::Vector{Float64})
	plot(x, u, marker = :., color = :black, ms = 2)
	plot!(xlabel = "x", ylabel = "u(x, t)", title = "t = 0")
end

# ╔═╡ 24e39a66-fb69-11ea-249a-a74856aa130a
square(x::Float64)::Float64 = -0.5<=x<=0.5 ? 1.0 : 0.0

# ╔═╡ 3a258358-fb69-11ea-05d8-1fba33f1ee6d
begin
	x, u = make_1Dgrid(-1.0, 1.0, 50)
	initialize_grid!(x, u, square)
	plot_solution(x, u)
end

# ╔═╡ 433ec4aa-fb72-11ea-35a7-b31f9faa0430
mod1(-1, 4)

# ╔═╡ 87aecb5e-fb6c-11ea-00d0-89703616c517
begin
	abstract type AbstractGrid{T}<:AbstractVector{T} end
	
	struct PeriodicGrid{T}<:AbstractGrid{T}
		grid :: Vector{T}
	end
	
	Base.size(A::PeriodicGrid{T}) where {T} = size(A.grid)
	Base.getindex(A::PeriodicGrid{T}, i::Int) where {T} = getindex(A.grid, mod1(i, length(A.grid)))
	Base.setindex!(A::PeriodicGrid{T}, v::T, i::Int) where {T} = setindex!(A.grid, v::T, mod1(i, length(A.grid)))
	
end

# ╔═╡ 92681110-fb6a-11ea-13c7-c7b5ceffebe2
begin
	function update!(u⁰::AbstractGrid{Float64}, u¹::AbstractGrid{Float64}, a::Float64,
			cfl::Float64, finite_diff_mode::FT_BS)
		k = a*cfl
		
		for i in 1:length(u⁰)
			u¹[i] = u⁰[i]-k*(u⁰[i]-u⁰[i-1])
		end
		u⁰ .= u¹
	end
	
	function update!(u⁰::AbstractGrid{Float64}, u¹::AbstractGrid{Float64}, a::Float64,
			cfl::Float64, finite_diff_mode::FT_CS)
		k = a*cfl
		
		for i in 1:length(u⁰)
			u¹[i] = u⁰[i]-0.5k*(u⁰[i+1]-u⁰[i-1])
		end
		u⁰ .= u¹
	end
	
	function update!(u⁰::AbstractGrid{Float64}, u¹::AbstractGrid{Float64}, a::Float64,
			cfl::Float64, finite_diff_mode::Lax_Fried)
		k = a*cfl
		
		for i in 1:length(u⁰)
			u¹[i] = 0.5(u⁰[i+1]+u⁰[i-1])-0.5k*(u⁰[i+1]-u⁰[i-1])
		end
		u⁰ .= u¹
	end
	
	function update!(u⁰::AbstractGrid{Float64}, u¹::AbstractGrid{Float64}, a::Float64,
			cfl::Float64, finite_diff_mode::Lax_Wend)
		k = a*cfl
		
		for i in 1:length(u⁰)
			u¹[i] = u⁰[i]-0.5k*(u⁰[i+1]-u⁰[i-1])+0.5k^2*(u⁰[i+1]-2u⁰[i]+u⁰[i-1])
		end
		u⁰ .= u¹
	end
end

# ╔═╡ e8dbceee-fb77-11ea-18c3-4b6da9dfbd31
begin
	u0 = PeriodicGrid(u)
	u1 = deepcopy(u0)
end

# ╔═╡ d130324c-fb6a-11ea-36db-57168e2cc9f8
begin
	update!(u0, u1, 1.0, 0.5, Lax_Fried())
	plot_solution(x, u0.grid)
end

# ╔═╡ Cell order:
# ╠═546db3f8-fb68-11ea-0403-87753ab83677
# ╠═1222daf2-fb68-11ea-020d-11fa0dca14cc
# ╠═cf4c4fb2-fb6f-11ea-0c23-eda948daf61a
# ╠═e321b0e6-fb67-11ea-2950-dfd6e62d9e14
# ╠═1506ac64-fb69-11ea-0f62-3b899fe1a9f6
# ╠═340e4d54-fb6b-11ea-293d-a1b7cdf81a1b
# ╠═24e39a66-fb69-11ea-249a-a74856aa130a
# ╠═3a258358-fb69-11ea-05d8-1fba33f1ee6d
# ╠═92681110-fb6a-11ea-13c7-c7b5ceffebe2
# ╠═e8dbceee-fb77-11ea-18c3-4b6da9dfbd31
# ╠═d130324c-fb6a-11ea-36db-57168e2cc9f8
# ╠═433ec4aa-fb72-11ea-35a7-b31f9faa0430
# ╠═87aecb5e-fb6c-11ea-00d0-89703616c517
